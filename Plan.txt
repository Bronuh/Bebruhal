Идея в том, чтобы создать модульного бота, объединяющего API нескольких социальных сервисов. Бот состоит из:

- Bebruhal - Ядро бота, способное подключать модули и плагины. Оно отвечает за:
	- загрузку модулей и их конфигурацию
	- ведение сессий
	- загрузку плагинов
	- связывание данных пользователей из разных сервисов
	- мониторинг состояния плагинов и модулей
	- контроль прав доступа
	
- Модули - библиотеки, предоставляющие доступ к API сервисов, используя общие интерфейсы, предоставляемые ядром
- Плагины - библиотеки, предоставляющие функционал
- Сессии  - наборы данных, содержащих информацию о пользователях, локальных настроек кэша файлов

Общая схема бота:

Bebruhal:
	- CommandsManager - менеджер команд. Через него выполняется вся работа с командами
	- ModulesManager - Менеджер/загрузчик модулей.
		- Module:
			- Id - текстовый идентификатор модуля
			- Description - описание модуля
			- Name - название модуля
			- Author - автор модуля
			- URL - ссылка на сайт модуля
	- PluginManager - Менеджер/загрузчик модулей.
		- Plugin:
			- Id - текстовый идентификатор плагина
			- Description - описание плагина
			- Name - название плагина
			- Author - автор плагина
			- URL - ссылка на сайт плагина
	- Groups
		- Group:
			- Id - идентификатор группы
			- Value - Уровень доступа группы
			- Name - Наименование группы
			- Permissions - список разрешений для указанного ранга
	- Session
		- CreationDate - дата создания сессии
		- Users - список пользователей.
			BebrUser:
				- Id - идентификатор пользователя
				- CreationDate - дата и время создания пользователя
				- Source - Id модуля, в котором изначально был создан пользователь
				- GroupId - идентификатор группы
				- ?Aliases - псевдонимы пользователя
				- ?Modules - список идентификаторов модулей, из которых было выполнено слияние в этого пользователя
				- Tags - список тегов, которыми пользователь может быть отмечен
				- ?IProperties - свойства пользователя. Нужна реализация нескольких типов.
					- Source - Id модуля или плагина, добавившего свойство
					- Key - Ключ
					- Value - Значение
	
	- Events - События, на которые могут подписаться плагины
		- RecievedMessage - вызывается модулем в момент передачи IMessage в ядро
		- RegisteredUser - вызывается BebrUser в конце конструктора
		- DeletedUser - вызывается в момент удаления пользователя
		- MergedUsers - вызывается в момент слияния пользователей

Особенности
Адрес: (строка)
			- синтаксис: moduleId.<sourceType.sourceId>
				Примеры:
					vk.chat.1337 - чат ВК с id 1337
					discord.user.9892579257462883 - пользователь дискорда с Id 9892579257462883. Фактически личная переписка является выделенным каналом, но тип user нагляднее
					discord.server.123456 - канал для бота по умолчанию на дискорд-сервере с Id 123456
					discord.server.123456.channel.voice - канал bots на дискорд-сервере с Id 123456
					
Permissions:
	- Синтаксис: плагин.<разрешение>. Также возможно наследование от групп group.Name:
		Примеры:
			- memator.meme.use - разрешение на использование мемов из плагина memator
			- memator.meme.edit - разрешение на редактирование мемов из плагина memator
			- memator.* - доступ ко всему функционалу плагина memator
			- group.moderator - наследование всех разрешений из группы moderator
	
Bebruhal:
	- IMessage
		- Source - Адрес источника сообщения
		- ?Destinations - Адреса для ответа на данное сообщение. Синтаксис описан в разделе "Адрес"
			- Ессли не указано, то равно Source
		- Base64Files
		- Text
		- RawAuthor
		- Author(BebrUser)
		- Respond builder(Layout text, files, target modules)

BebrUser:
	- Merge(User1,User2)
		- # Базовый пользователь выбирается, основываясь на дате создания пользователей. После слияния сохраняются Id и Source базового пользователя. Другой же пользователь удаляется.
	- IProperties
		- Для каждого модуля должен содержать 'lastSeen' - адрес до места, где он в последниий раз был активен

Module:
	- Message:IMessage
	- SendMessage(Message)